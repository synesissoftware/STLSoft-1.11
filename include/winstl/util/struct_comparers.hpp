/* /////////////////////////////////////////////////////////////////////////
 * File:    winstl/util/struct_comparers.hpp
 *
 * Purpose: Functions for comparing Windows API structures.
 *
 * Created: 9th October 2024
 * Updated: 15th October 2024
 *
 * Home:    http://stlsoft.org/
 *
 * Copyright (c) 2024, Matthew Wilson and Synesis Information Systems
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * - Neither the name(s) of Matthew Wilson and Synesis Information Systems
 *   nor the names of any contributors may be used to endorse or promote
 *   products derived from this software without specific prior written
 *   permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ////////////////////////////////////////////////////////////////////// */


/** \file winstl/util/struct_comparers.hpp
 *
 * \brief [C++] Definition of the winstl::equal_struct structure comparison
 *   function
 *   (\ref group__library__Utility "Utility" Library).
 */

#ifndef WINSTL_INCL_WINSTL_UTIL_HPP_STRUCT_COMPARERS
#define WINSTL_INCL_WINSTL_UTIL_HPP_STRUCT_COMPARERS

#ifndef STLSOFT_DOCUMENTATION_SKIP_SECTION
# define WINSTL_VER_WINSTL_UTIL_HPP_STRUCT_COMPARERS_MAJOR      1
# define WINSTL_VER_WINSTL_UTIL_HPP_STRUCT_COMPARERS_MINOR      0
# define WINSTL_VER_WINSTL_UTIL_HPP_STRUCT_COMPARERS_REVISION   3
# define WINSTL_VER_WINSTL_UTIL_HPP_STRUCT_COMPARERS_EDIT       3
#endif /* !STLSOFT_DOCUMENTATION_SKIP_SECTION */


/* /////////////////////////////////////////////////////////////////////////
 * includes
 */

#ifndef WINSTL_INCL_WINSTL_H_WINSTL
# include <winstl/winstl.h>
#endif /* !WINSTL_INCL_WINSTL_H_WINSTL */
#ifdef STLSOFT_TRACE_INCLUDE
# pragma message(__FILE__)
#endif /* STLSOFT_TRACE_INCLUDE */

#ifndef WINSTL_INCL_WINSTL_API_H_winstl_ntddi_
# include <winstl/api/winstl_ntddi_.h>
#endif /* !WINSTL_INCL_WINSTL_API_H_winstl_ntddi_ */
#ifndef WINSTL_INCL_WINSTL_API_H_winstl_win32_winnt_
# include <winstl/api/winstl_win32_winnt_.h>
#endif /* !WINSTL_INCL_WINSTL_API_H_winstl_win32_winnt_ */

#ifndef STLSOFT_INCL_H_STRING
# define STLSOFT_INCL_H_STRING
# include <string.h>
#endif /* !STLSOFT_INCL_H_STRING */


/* /////////////////////////////////////////////////////////////////////////
 * namespace
 */

#ifndef WINSTL_NO_NAMESPACE
# if defined(STLSOFT_NO_NAMESPACE) || \
     defined(STLSOFT_DOCUMENTATION_SKIP_SECTION)
/* There is no stlsoft namespace, so must define ::winstl */
namespace winstl
{
# else
/* Define stlsoft::winstl_project */
namespace stlsoft
{
namespace winstl_project
{
# endif /* STLSOFT_NO_NAMESPACE */
#endif /* !WINSTL_NO_NAMESPACE */


/* /////////////////////////////////////////////////////////////////////////
 * types
 */

/** Designates how structures may be compared
 *
 * \ingroup group__library__Utility
 */
template <ss_typename_param_k T>
struct struct_comparison_traits;


#ifndef STLSOFT_DOCUMENTATION_SKIP_SECTION

struct struct_is
{
    struct not_comparable_by_bytes
    {};

    struct comparable_by_bytes
    {};
};

template <ss_typename_param_k T>
struct struct_comparison_traits
{
    typedef struct_is::not_comparable_by_bytes              type;
};

template <ss_typename_param_k T>
struct struct_comparison_traits_IS_NOT_SPECIALISED_FOR_
{};

template <ss_typename_param_k T>
inline
struct_comparison_traits_IS_NOT_SPECIALISED_FOR_<T>
do_equal_struct(
    T const* /* lhs */
,   T const* /* rhs */
,   struct_is::not_comparable_by_bytes
)
{
    static const struct_comparison_traits_IS_NOT_SPECIALISED_FOR_<T> r = {};

    return r;
}

template <ss_typename_param_k T>
inline
bool
do_equal_struct(
    T const*    lhs
,   T const*    rhs
,   struct_is::comparable_by_bytes
)
{
    return 0 == STLSOFT_NS_GLOBAL(memcmp)(lhs, rhs, sizeof(T));
}
#endif /* !STLSOFT_DOCUMENTATION_SKIP_SECTION */


/* /////////////////////////////////////////////////////////////////////////
 * API functions
 */

/** Compares two structure instances as directed by the structure type's
 * specialisation of struct_comparison_traits
 *
 * \ingroup group__library__Utility
 *
 * \param lhs The first structures to compare
 * \param rhs The second structures to compare
 */
template <ss_typename_param_k T>
inline
bool
equal_struct(
    T const&    lhs
,   T const&    rhs
)
{
    typedef ss_typename_type_k struct_comparison_traits<
        T
    >::type                                                 discriminator_t;

    bool const result = do_equal_struct(&lhs, &rhs, discriminator_t());

    return result;
}

/* /////////////////////////////////////////////////////////////////////////
 * specialisations
 */

#ifndef STLSOFT_DOCUMENTATION_SKIP_SECTION

# define WINSTL_THE_COMPARABLE_STRUCTURE_(S, t)     \
                                                    \
    STLSOFT_TEMPLATE_SPECIALISATION                 \
    struct struct_comparison_traits<S>              \
    {                                               \
        typedef struct_##t  type;                   \
    }

// GuidDef.h

WINSTL_THE_COMPARABLE_STRUCTURE_(GUID, is::comparable_by_bytes);

// WinBase.h:

WINSTL_THE_COMPARABLE_STRUCTURE_(ACTCTX_SECTION_KEYED_DATA, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACTCTX_SECTION_KEYED_DATA_2600, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ACTCTXA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ACTCTXW, is::not_comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACTIVATION_CONTEXT_BASIC_INFORMATION, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(COMMCONFIG, is::not_comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(COMMPROP, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(COMMTIMEOUTS, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(COMSTAT, is::comparable_by_bytes);
/* NOTE: this is probably a mistake in WinBase.h as there appear to be no records anywhere of a NTDDI_WIN10_GE */
#if defined(NTDDI_WIN10_GE) &&\
    WINSTL_NTDDI_VERSION >= NTDDI_WIN10_GE
WINSTL_THE_COMPARABLE_STRUCTURE_(COPYFILE2_CREATE_OPLOCK_KEYS, is::comparable_by_bytes);
#endif /* NTDDI_VERSION >= NTDDI_WIN10_GE */
WINSTL_THE_COMPARABLE_STRUCTURE_(COPYFILE2_EXTENDED_PARAMETERS, is::comparable_by_bytes);
#if WINSTL_NTDDI_VERSION >= WINSTL_NTDDI_WIN10_FE
WINSTL_THE_COMPARABLE_STRUCTURE_(COPYFILE2_EXTENDED_PARAMETERS_V2, is::comparable_by_bytes);
#endif /* NTDDI_VERSION >= NTDDI_WIN10_FE */
WINSTL_THE_COMPARABLE_STRUCTURE_(COPYFILE2_MESSAGE, is::comparable_by_bytes);
// DCB
inline
bool
equal_struct(
    DCB const&  lhs
,   DCB const&  rhs
)
{
    if (0 == STLSOFT_NS_GLOBAL(memcmp)(&lhs, &rhs, sizeof(DCB)))
    {
        return true;
    }

    if (lhs.wReserved == rhs.wReserved &&
        lhs.wReserved1 == rhs.wReserved1)
    {
        return false;
    }

    DCB lhs_ = lhs;
    DCB rhs_ = rhs;

    lhs_.wReserved = 0;
    lhs_.wReserved1 = 0;
    rhs_.wReserved = 0;
    rhs_.wReserved1 = 0;

    return 0 == STLSOFT_NS_GLOBAL(memcmp)(&lhs_, &rhs_, sizeof(DCB));
}
WINSTL_THE_COMPARABLE_STRUCTURE_(EVENTLOG_FULL_INFORMATION, is::comparable_by_bytes);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN8
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_ALIGNMENT_INFO, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_ALLOCATION_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_ATTRIBUTE_TAG_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_BASIC_INFO, is::comparable_by_bytes);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_CASE_SENSITIVE_INFO, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_COMPRESSION_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_DISPOSITION_INFO, is::comparable_by_bytes);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_DISPOSITION_INFO_EX, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_END_OF_FILE_INFO, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_FULL_DIR_INFO, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_ID_BOTH_DIR_INFO, is::not_comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_ID_DESCRIPTOR, is::comparable_by_bytes);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN8
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_ID_EXTD_DIR_INFO, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_ID_INFO, is::not_comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_IO_PRIORITY_HINT_INFO, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_NAME_INFO, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_REMOTE_PROTOCOL_INFO, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_RENAME_INFO, is::not_comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_STANDARD_INFO, is::comparable_by_bytes);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN8
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_STORAGE_INFO, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_STREAM_INFO, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(HW_PROFILE_INFOA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(HW_PROFILE_INFOW, is::not_comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(JIT_DEBUG_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(MEMORYSTATUS, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(OFSTRUCT, is::not_comparable_by_bytes);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN8
WINSTL_THE_COMPARABLE_STRUCTURE_(OPERATION_END_PARAMETERS, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(OPERATION_START_PARAMETERS, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
// WINSTL_THE_COMPARABLE_STRUCTURE_(STARTUPINFOEXA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(STARTUPINFOEXW, is::not_comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_POWER_STATUS, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(UMS_SCHEDULER_STARTUP_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(UMS_SYSTEM_THREAD_INFORMATION, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN32_STREAM_ID, is::not_comparable_by_bytes);

// ProcessThreadsApi.h

#if WINSTL_NTDDI_VERSION >= WINSTL_NTDDI_WIN10_MN
WINSTL_THE_COMPARABLE_STRUCTURE_(APC_CALLBACK_DATA, is::comparable_by_bytes);
#endif /* NTDDI_VERSION >= NTDDI_WIN10_MN */
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(APP_MEMORY_INFORMATION, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */

#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN8
WINSTL_THE_COMPARABLE_STRUCTURE_(MEMORY_PRIORITY_INFORMATION, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
#if 0
WINSTL_THE_COMPARABLE_STRUCTURE_(OVERRIDE_PREFETCH_PARAMETER, is::comparable_by_bytes);
#endif
WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_INFORMATION, is::comparable_by_bytes);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_LEAP_SECOND_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MACHINE_INFORMATION, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MEMORY_EXHAUSTION_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_POWER_THROTTLING_STATE, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_PROTECTION_LEVEL_INFORMATION, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */
// WINSTL_THE_COMPARABLE_STRUCTURE_(STARTUPINFOA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(STARTUPINFOW, is::not_comparable_by_bytes);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(THREAD_POWER_THROTTLING_STATE, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */

// MinWinBase.h

WINSTL_THE_COMPARABLE_STRUCTURE_(CREATE_PROCESS_DEBUG_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(CREATE_THREAD_DEBUG_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(DEBUG_EVENT, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(EXCEPTION_DEBUG_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(EXCEPTION_RECORD, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(EXIT_PROCESS_DEBUG_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(EXIT_THREAD_DEBUG_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(FILETIME, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(LOAD_DLL_DEBUG_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(OUTPUT_DEBUG_STRING_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(OVERLAPPED, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(OVERLAPPED_ENTRY, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_HEAP_ENTRY, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(REASON_CONTEXT, is::not_comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(RIP_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(SECURITY_ATTRIBUTES, is::comparable_by_bytes);
// SYSTEMTIME
inline
bool
equal_struct(
    SYSTEMTIME const&    lhs
,   SYSTEMTIME const&    rhs
)
{
    if (0 == STLSOFT_NS_GLOBAL(memcmp)(&lhs, &rhs, sizeof(SYSTEMTIME)))
    {
        return true;
    }

    if (lhs.wDayOfWeek == rhs.wDayOfWeek)
    {
        return false;
    }

    SYSTEMTIME lhs_ = lhs;
    SYSTEMTIME rhs_ = rhs;

    lhs_.wDayOfWeek = 0;
    rhs_.wDayOfWeek = 0;

    return 0 == STLSOFT_NS_GLOBAL(memcmp)(&lhs_, &rhs_, sizeof(SYSTEMTIME));
}
WINSTL_THE_COMPARABLE_STRUCTURE_(UNLOAD_DLL_DEBUG_INFO, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN32_FIND_DATAA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN32_FIND_DATAW, is::not_comparable_by_bytes);

// SysInfoApi.h

WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(MEMORYSTATUSEX, is::comparable_by_bytes);

// FileApi.h

WINSTL_THE_COMPARABLE_STRUCTURE_(BY_HANDLE_FILE_INFORMATION, is::comparable_by_bytes);
#if (WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN8)
WINSTL_THE_COMPARABLE_STRUCTURE_(CREATEFILE2_EXTENDED_PARAMETERS, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(DISK_SPACE_INFORMATION, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */
WINSTL_THE_COMPARABLE_STRUCTURE_(WIN32_FILE_ATTRIBUTE_DATA, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN32_FIND_STREAM_DATA, is::not_comparable_by_bytes);

// TimeZoneApi.h

// WINSTL_THE_COMPARABLE_STRUCTURE_(DYNAMIC_TIME_ZONE_INFORMATION, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TIME_ZONE_INFORMATION, is::not_comparable_by_bytes);

// WinConTypes.h

#ifdef _WINCON_

WINSTL_THE_COMPARABLE_STRUCTURE_(CHAR_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(CONSOLE_CURSOR_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(CONSOLE_FONT_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(CONSOLE_SCREEN_BUFFER_INFO, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(COORD, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(FOCUS_EVENT_RECORD, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(INPUT_RECORD, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(MENU_EVENT_RECORD, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(MOUSE_EVENT_RECORD, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(SMALL_RECT, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(WINDOW_BUFFER_SIZE_RECORD, is::comparable_by_bytes);
# if defined(_MSC_VER) && \
     _MSC_VER >= 1600
WINSTL_THE_COMPARABLE_STRUCTURE_(CONSOLE_SCREEN_BUFFER_INFOEX, is::comparable_by_bytes);
# endif /* VC++ 10+ */
#endif /* _WINCON_ */

// WinTrust.h

#ifdef WINTRUST_H

// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN_CERTIFICATE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN_TRUST_ACTDATA_SUBJECT_ONLY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN_TRUST_SUBJECT_FILE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN_TRUST_SUBJECT_FILE_AND_DISPLAY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WIN_SPUB_TRUSTED_PUBLISHER_DATA, is::XXXX);
#endif /* WINTRUST_H */

// WinNT.h

WINSTL_THE_COMPARABLE_STRUCTURE_(ACCESS_ALLOWED_ACE, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACCESS_ALLOWED_CALLBACK_ACE, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACCESS_ALLOWED_OBJECT_ACE, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACCESS_DENIED_ACE, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACCESS_DENIED_CALLBACK_ACE, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACCESS_DENIED_CALLBACK_OBJECT_ACE, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACCESS_DENIED_OBJECT_ACE, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ACCESS_REASONS, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACE_HEADER, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACL, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACL_REVISION_INFORMATION, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(ACL_SIZE_INFORMATION, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ACTIVATION_CONTEXT_DETAILED_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ACTIVATION_CONTEXT_QUERY_INDEX, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(ADMINISTRATOR_POWER_POLICY, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ANON_OBJECT_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ANON_OBJECT_HEADER_BIGOBJ, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ANON_OBJECT_HEADER_V2, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(APPLICATIONLAUNCH_SETTING_VALUE, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ARM64_NT_CONTEXT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ARM64EC_NT_CONTEXT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ASSEMBLY_FILE_DETAILED_INFORMATION, is::not_comparable_by_bytes);
#if 0
WINSTL_THE_COMPARABLE_STRUCTURE_(ATTRIBUTES_AND_SID, is::comparable_by_bytes);
#endif
#if !defined(_BATCLASS_) ||\
    WINSTL_NTDDI_VERSION >= WINSTL_NTDDI_WINXP
WINSTL_THE_COMPARABLE_STRUCTURE_(BATTERY_REPORTING_SCALE, is::comparable_by_bytes);
#endif /* (NTDDI_VERSION >= NTDDI_WINXP) || !defined(_BATCLASS_) */
WINSTL_THE_COMPARABLE_STRUCTURE_(CACHE_DESCRIPTOR, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(CACHE_RELATIONSHIP, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(CFG_CALL_TARGET_INFO, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(CLAIM_SECURITY_ATTRIBUTE_V1, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(CLAIM_SECURITY_ATTRIBUTES_INFORMATION, is::XXXX);
#if WINSTL_NTDDI_VERSION >= WINSTL_NTDDI_WINXP
// WINSTL_THE_COMPARABLE_STRUCTURE_(CM_Power_Data_s, is::XXXX);
#endif /* NTDDI_VERSION >= NTDDI_WINXP */
// WINSTL_THE_COMPARABLE_STRUCTURE_(COMPATIBILITY_CONTEXT_ELEMENT, is::XXXX);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(COMPONENT_FILTER, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */
WINSTL_THE_COMPARABLE_STRUCTURE_(CONTEXT, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(CORRELATION_VECTOR, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(DISPATCHER_CONTEXT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(DISPATCHER_CONTEXT_ARM64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(DISPATCHER_CONTEXT_ARM64EC, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(EM_EXTENDED_PARAMETER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ENCLAVE_CREATE_INFO_SGX, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ENCLAVE_CREATE_INFO_VBS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ENCLAVE_CREATE_INFO_VBS_BASIC, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ENCLAVE_INIT_INFO_SGX, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ENCLAVE_INIT_INFO_VBS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ENCLAVE_INIT_INFO_VBS_BASIC, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ENCLAVE_LOAD_DATA_VBS_BASIC, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ENLISTMENT_BASIC_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ENLISTMENT_CRM_INFORMATION, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(EVENTLOGRECORD, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(EVENTSFORLOGFILE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(EXCEPTION_POINTERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(EXCEPTION_RECORD, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(EXCEPTION_RECORD32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(EXCEPTION_RECORD64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(EXCEPTION_REGISTRATION_RECORD, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_CASE_SENSITIVE_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_ID_128, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_NOTIFY_EXTENDED_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_NOTIFY_FULL_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_NOTIFY_INFORMATION, is::XXXX);
#if WINSTL_NTDDI_VERSION >= WINSTLNTDDI_WIN11_ZN
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_STAT_BASIC_INFORMATION, is::XXXX);
#endif /* NTDDI_VERSION >= NTDDI_WIN11_ZN */
#if !defined(WINSTL_ARCH_IS_ARM64) &&\
    !defined(STLSOFT_COMPILER_IS_GCC)
# if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_STAT_INFORMATION, is::comparable_by_bytes);
# endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */
#endif
// WINSTL_THE_COMPARABLE_STRUCTURE_(FILE_STAT_LX_INFORMATION, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(FLOAT128, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FLOATING_SAVE_AREA, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(FPO_DATA, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(GENERIC_MAPPING, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(GROUP_AFFINITY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(GROUP_AFFINITY32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(GROUP_AFFINITY64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(GROUP_RELATIONSHIP, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(HARDWARE_COUNTER_DATA, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(HEAP_OPTIMIZE_RESOURCES_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(HIBERFILE_BUCKET, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ARCHIVE_MEMBER_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_AUX_SYMBOL_TOKEN_DEF, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_BASE_RELOCATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_BDD_DYNAMIC_RELOCATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_BDD_INFO, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_BOUND_FORWARDER_REF, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_BOUND_IMPORT_DESCRIPTOR, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_CE_RUNTIME_FUNCTION_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_COFF_SYMBOLS_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_COR20_HEADE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DATA_DIRECTORY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DEBUG_DIRECTORY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DEBUG_MISC, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DELAYLOAD_DESCRIPTOR, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DOS_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DYNAMIC_RELOCATION_TABLE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DYNAMIC_RELOCATION32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DYNAMIC_RELOCATION32_V2, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DYNAMIC_RELOCATION64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_DYNAMIC_RELOCATION64_V2, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ENCLAVE_CONFIG32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ENCLAVE_CONFIG64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ENCLAVE_IMPORT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_EXPORT_DIRECTORY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_FILE_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_FUNCTION_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_FUNCTION_ENTRY64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_FUNCTION_OVERRIDE_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_HOT_PATCH_BASE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_HOT_PATCH_HASHES, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_HOT_PATCH_INFO, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_HOT_PATCH_MACHINE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_IMPORT_BY_NAME, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_IMPORT_DESCRIPTOR, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_LINENUMBER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_LOAD_CONFIG_CODE_INTEGRITY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_LOAD_CONFIG_DIRECTORY32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_LOAD_CONFIG_DIRECTORY64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_NT_HEADERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_NT_HEADERS64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_OPTIONAL_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_OPTIONAL_HEADER64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_OS2_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_POLICY_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_POLICY_METADATA, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_RELOCATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_RESOURCE_DATA_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_RESOURCE_DIR_STRING_U, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_RESOURCE_DIRECTORY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_RESOURCE_DIRECTORY_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_RESOURCE_DIRECTORY_STRING, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ROM_HEADERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_ROM_OPTIONAL_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_RUNTIME_FUNCTION_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_SECTION_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_SEPARATE_DEBUG_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_SYMBOL, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_SYMBOL_EX, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_THUNK_DATA32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_THUNK_DATA64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_TLS_DIRECTORY32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_TLS_DIRECTORY64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMAGE_VXD_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ImageArchitectureEntry, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(ImageArchitectureHeader, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IMPORT_OBJECT_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(IO_COUNTERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOB_SET_ARRAY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_ASSOCIATE_COMPLETION_PORT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_BASIC_LIMIT_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_BASIC_PROCESS_ID_LIST, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_BASIC_UI_RESTRICTIONS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_END_OF_JOB_TIME_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_EXTENDED_LIMIT_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_IO_ATTRIBUTION_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_IO_ATTRIBUTION_STATS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_JOBSET_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_LIMIT_VIOLATION_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_NET_RATE_CONTROL_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(JOBOBJECT_SECURITY_LIMIT_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(KERNEL_CET_CONTEXT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(KNONVOLATILE_CONTEXT_POINTERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(KNONVOLATILE_CONTEXT_POINTERS_ARM64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(KTMOBJECT_CURSOR, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(LARGE_INTEGER, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(LDT_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(LIST_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(LIST_ENTRY32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(LIST_ENTRY64, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(LUID, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(LUID_AND_ATTRIBUTES, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(M128A, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(MAXVERSIONTESTED_INFO, is::XXXX);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(MEM_ADDRESS_REQUIREMENTS, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */
// WINSTL_THE_COMPARABLE_STRUCTURE_(MEMORY_BASIC_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(MEMORY_BASIC_INFORMATION32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(MEMORY_BASIC_INFORMATION64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(MESSAGE_RESOURCE_BLOCK, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(MESSAGE_RESOURCE_DATA, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(MESSAGE_RESOURCE_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(NEON128, is::not_comparable_by_bytes);
#if WINSTL_NTDDI_VERSION >= WINSTL_NTDDI_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(NETWORK_APP_INSTANCE_EA, is::comparable_by_bytes);
#endif /* NTDDI_VERSION >= NTDDI_WIN10 */
// WINSTL_THE_COMPARABLE_STRUCTURE_(NON_PAGED_DEBUG_INFO, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(NT_TIB, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(NT_TIB32, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(NT_TIB64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(NUMA_NODE_RELATIONSHIP, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(NV_MEMORY_RANGE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(OBJECT_TYPE_LIST, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(OBJECTID, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(OSVERSIONINFOA, is::XXXX);
#if !defined(STLSOFT_COMPILER_IS_DMC) && \
    (   !defined(STLSOFT_COMPILER_IS_MSVC) || \
        _MSC_VER >= 1200)
// WINSTL_THE_COMPARABLE_STRUCTURE_(OSVERSIONINFOEXA, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(OSVERSIONINFOEXW, is::XXXX);
#endif /* compiler */
// WINSTL_THE_COMPARABLE_STRUCTURE_(OSVERSIONINFOW, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PACKEDEVENTINFO, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(PERFORMANCE_DATA, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_IDLE_RESILIENCY, is::XXXX);
#if WINSTL_NTDDI_VERSION >= WINSTL_NTDDI_WIN11_GA
// WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_LIMIT_ATTRIBUTES, is::not_comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_LIMIT_VALUE, is::comparable_by_bytes);
#endif /* NTDDI_VERSION >= NTDDI_WIN11_GA */
// WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_MONITOR_INVOCATION, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_PLATFORM_INFORMATION, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_SESSION_CONNECT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_SESSION_RIT_STATE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_SESSION_TIMEOUTS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_SESSION_WINLOGON, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(POWER_USER_PRESENCE, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(PRIVILEGE_SET, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_DYNAMIC_EH_CONTINUATION_TARGET, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_ASLR_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_CHILD_PROCESS_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_DEP_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_FONT_DISABLE_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_IMAGE_LOAD_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_SEHOP_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESS_NETWORK_COUNTERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESSOR_GROUP_INFO, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESSOR_NUMBER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESSOR_POWER_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESSOR_POWER_POLICY_INFO, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(PROCESSOR_RELATIONSHIP, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(QUOTA_LIMITS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(QUOTA_LIMITS_EX, is::XXXX);
#if (   (   defined(NTDDI_WIN10_RS5) &&\
            WINSTL_NTDDI_VERSION >= NTDDI_WIN10_RS5) ||\
        (   defined(NTDDI_WIN8) &&\
            WINSTL_NTDDI_VERSION >= NTDDI_WIN8))
// WINSTL_THE_COMPARABLE_STRUCTURE_(REARRANGE_FILE_DATA, is::XXXX);
# ifdef _WIN64
// WINSTL_THE_COMPARABLE_STRUCTURE_(REARRANGE_FILE_DATA32, is::XXXX);
# endif /* _WIN64 */
#endif /* (NTDDI_VERSION >= NTDDI_WIN10_RS5) || (NTDDI_VERSION >= NTDDI_WIN8) */
// WINSTL_THE_COMPARABLE_STRUCTURE_(REPARSE_GUID_DATA_BUFFER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(RESOURCEMANAGER_BASIC_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(RESOURCEMANAGER_COMPLETION_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(RESUME_PERFORMANCE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(RTL_BARRIER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(RTL_CONDITION_VARIABLE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(RTL_CRITICAL_SECTION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(RTL_CRITICAL_SECTION_DEBUG, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(RTL_SRWLOCK, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SCOPE_TABLE_AMD64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SCOPE_TABLE_ARM, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SCOPE_TABLE_ARM64, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SCRUB_DATA_INPUT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SCRUB_DATA_OUTPUT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SCRUB_PARITY_EXTENT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SCRUB_PARITY_EXTENT_DATA, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SE_ACCESS_REPL, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SE_ACCESS_REQUES, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SE_IMPERSONATION_STATE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SE_SECURITY_DESCRIPTO, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SE_TOKEN_USER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SECURITY_CAPABILITIES, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SECURITY_DESCRIPTOR, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SECURITY_DESCRIPTOR_RELATIVE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SECURITY_OBJECT_AI_PARAMS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SECURITY_QUALITY_OF_SERVICE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SERVERSILO_BASIC_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SERVERSILO_DIAGNOSTIC_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SHARED_VIRTUAL_DISK_SUPPORT, is::XXXX);
#if WINSTL_WIN32_WINNT >= WINSTL_WIN32_WINNT_WIN10
WINSTL_THE_COMPARABLE_STRUCTURE_(SHUFFLE_FILE_DATA, is::comparable_by_bytes);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */
// WINSTL_THE_COMPARABLE_STRUCTURE_(SID, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(SID_AND_ATTRIBUTES, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SID_AND_ATTRIBUTES_HASH, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SID_IDENTIFIER_AUTHORITY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SILOOBJECT_BASIC_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SINGLE_LIST_ENTRY, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SLIST_ENTRY, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(SUPPORTED_OS_INFO, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_ACCESS_FILTER_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_ALARM_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_ALARM_CALLBACK_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_ALARM_CALLBACK_OBJECT_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_ALARM_OBJECT_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_AUDIT_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_AUDIT_CALLBACK_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_AUDIT_OBJECT_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_CPU_SET_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_LOGICAL_PROCESSOR_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_MANDATORY_LABEL_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_POOL_ZEROING_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_POWER_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_PROCESS_TRUST_LABEL_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_RESOURCE_ATTRIBUTE_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_SCOPED_POLICY_ID_ACE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_CREATE_PARTITION, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_ERASE, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_GET_DRIVE_PARAMETERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_GET_MEDIA_PARAMETERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_GET_POSITION, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_PREPARE, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_SET_DRIVE_PARAMETERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_SET_MEDIA_PARAMETERS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_SET_POSITION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_WMI_OPERATIONS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TAPE_WRITE_MARKS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_ACCESS_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_APPCONTAINER_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_AUDIT_POLICY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_BNO_ISOLATION_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_CONTROL, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_DEFAULT_DACL, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_DEVICE_CLAIMS, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_ELEVATION, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_GROUPS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_GROUPS_AND_PRIVILEGES, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_LINKED_TOKEN, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_LOGGING_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_MANDATORY_LABEL, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_MANDATORY_POLICY, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_ORIGIN, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_OWNER, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_PRIMARY_GROUP, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_PRIVILEGES, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_SID_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_SOURCE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_STATISTICS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_USER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TOKEN_USER_CLAIMS, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TP_CALLBACK_ENVIRON_V1, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TP_CALLBACK_ENVIRON_V3, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TP_CALLBACK_INSTANCE, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TP_CLEANUP_GROUP, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TP_IO, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TP_POOL_STACK_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTION_BASIC_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTION_BIND_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTION_ENLISTMENT_PAIR, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTION_ENLISTMENTS_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTION_LIST_ENTRY, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTION_LIST_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTION_PROPERTIES_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTIONMANAGER_BASIC_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTIONMANAGER_LOG_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTIONMANAGER_LOGPATH_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTIONMANAGER_OLDEST_INFORMATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(TRANSACTIONMANAGER_RECOVERY_INFORMATION, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(ULARGE_INTEGER, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(UMS_CREATE_THREAD_ATTRIBUTES, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(UNWIND_HISTORY_TABLE, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(UNWIND_HISTORY_TABLE_ENTRY, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(WOW64_CONTEXT, is::comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(WOW64_DESCRIPTOR_TABLE_ENTRY, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(WOW64_FLOATING_SAVE_AREA, is::XXXX);
WINSTL_THE_COMPARABLE_STRUCTURE_(WOW64_LDT_ENTRY, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(XSAVE_AREA, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(XSAVE_AREA_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(XSAVE_ARM64_SVE_HEADER, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(XSAVE_CET_U_FORMAT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(XSAVE_FORMAT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(XSTATE_CONFIGURATION, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(XSTATE_CONTEXT, is::XXXX);
// WINSTL_THE_COMPARABLE_STRUCTURE_(XSTATE_FEATURE, is::XXXX);


// ShellApi.h

#if defined(_INC_SHELLAPI) ||\
    defined(_SHELLAPI_H) ||\
    !defined(WIN32_LEAN_AND_MEAN)
// WINSTL_THE_COMPARABLE_STRUCTURE_(SHFILEOPSTRUCTA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SHFILEOPSTRUCTW, is::not_comparable_by_bytes);
#if !defined(STLSOFT_COMPILER_IS_GCC)
// WINSTL_THE_COMPARABLE_STRUCTURE_(SHNAMEMAPPINGA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SHNAMEMAPPINGW, is::not_comparable_by_bytes);
#endif /* compiler */
// WINSTL_THE_COMPARABLE_STRUCTURE_(SHFILEINFOA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SHFILEINFOW, is::not_comparable_by_bytes);


#if 0
# if !defined(STLSOFT_COMPILER_IS_DMC) && \
     !defined(STLSOFT_COMPILER_IS_GCC) && \
     (   !defined(STLSOFT_COMPILER_IS_MSVC) || \
         _MSC_VER >= 1200) && \
     defined(WINVER) && \
     WINVER >= 0x0400
WINSTL_THE_COMPARABLE_STRUCTURE_(DRAGINFOA, is::not_comparable_by_bytes);
WINSTL_THE_COMPARABLE_STRUCTURE_(DRAGINFOW, is::not_comparable_by_bytes);
# endif /* WINVER */
#endif

WINSTL_THE_COMPARABLE_STRUCTURE_(APPBARDATA, is::comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SHELLEXECUTEINFOA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(SHELLEXECUTEINFOW, is::not_comparable_by_bytes);
#if 0
# if 1 && \
     !defined(STLSOFT_COMPILER_IS_DMC) && \
     (   !defined(STLSOFT_COMPILER_IS_GCC) || \
         __GNUC__ > 3 || \
         (   __GNUC__ == 3 && \
             __GNUC_MINOR__ > 2)) && \
     (   !defined(STLSOFT_COMPILER_IS_MSVC) || \
         _MSC_VER == 1200 || \
         WINSTL_NTDDI_VERSION >= 0x05000000) && \
     1
WINSTL_THE_COMPARABLE_STRUCTURE_(SHQUERYRBINFO, is::comparable_by_bytes);
# endif /* compiler */
#endif
// WINSTL_THE_COMPARABLE_STRUCTURE_(NOTIFYICONDATAA, is::not_comparable_by_bytes);
// WINSTL_THE_COMPARABLE_STRUCTURE_(NOTIFYICONDATAW, is::not_comparable_by_bytes);

#endif /* _INC_SHELLAPI || _SHELLAPI_H || !WIN32_LEAN_AND_MEAN */

# undef WINSTL_THE_COMPARABLE_STRUCTURE_
#endif /* !STLSOFT_DOCUMENTATION_SKIP_SECTION */


/* ////////////////////////////////////////////////////////////////////// */

#ifndef WINSTL_NO_NAMESPACE
# if defined(STLSOFT_NO_NAMESPACE) || \
     defined(STLSOFT_DOCUMENTATION_SKIP_SECTION)
} /* namespace winstl */
# else
} /* namespace winstl_project */
} /* namespace stlsoft */
# endif /* STLSOFT_NO_NAMESPACE */
#endif /* !WINSTL_NO_NAMESPACE */


/* /////////////////////////////////////////////////////////////////////////
 * inclusion control
 */

#ifdef STLSOFT_CF_PRAGMA_ONCE_SUPPORT
# pragma once
#endif /* STLSOFT_CF_PRAGMA_ONCE_SUPPORT */

#endif /* !WINSTL_INCL_WINSTL_UTIL_HPP_STRUCT_COMPARERS */

/* ///////////////////////////// end of file //////////////////////////// */

